#!/usr/bin/env python

import sys
import math
from collections import namedtuple

Node = namedtuple('Node', ['pred', 'children', 'score'])

def intersects(a, b):
    return min(a[1], b[1]) > max(a[0], b[0])

def insert(node, p):
    if intersects(p, node.pred):
        return False

    inserted = False
    c_max_score = 0

    for c in node.children:
        inserted |= insert(c, p)
        c_max_score = max(c_max_score, c.score[0])

    if not inserted:
        node.children.append(Node(p, [], [p[2]]))
        c_max_score = max(c_max_score, p[2])

    node.score[0] = node.pred[2] + c_max_score

    return True

with open(sys.argv[1]) as f:
    n = int(f.readline())
    lines = int(math.ceil(n/80.0))
    s = ''.join(f.readline().strip() for _ in range(0, lines))
    g = int(f.readline())
    predictions = [ tuple([int(x) for x in f.readline().split()]) for _ in range(0, g)]

predictions.sort(key=lambda p: p[0])

root = Node((-1, -2, 0), [], [0,])

for p in predictions:
    insert(root, p)

print root.score[0]
